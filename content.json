[{"title":"Windows下利用Compact命令压缩系统和文件","date":"2017-02-07T05:55:59.000Z","path":"2017/02/07/cmd-compact/","text":"compact命令是NTFS文件系统压缩功能的命令行版本，用来显示或更改NTFS分区上的文件和目录的压缩属性 语法 123456789101112131415161718192021222324COMPACT [/C | /U] [/S[:dir]] [/A] [/I] [/F] [/Q] [/EXE[:algorithm]] [/CompactOs[:option] [/WinDir:dir]] [filename [...]] /C 压缩指定的文件。将对目录进行标记，以便压缩随后添加的文件，除非 /EXE已指定。 /U 解压缩指定的文件。将对目录进行标记，这样就不会压缩随后添加的文件。如果指定了/EXE，则只有压缩为可执行文件的文件才会进行解压缩；如果省略此项，则只有 NTFS 压缩文件才会进行解压缩。 /S 对给定目录和所有子目录中的文件执行指定的操作。默认 \"dir\" 是当前目录。 /A 显示包含隐藏属性或系统属性的文件。默认情况下，这些文件将被省略。 /I 即使在出现错误后也继续执行指定的操作。默认情况下，COMPACT 将在遇到错误时停止。 /F 对所有指定文件强制执行压缩操作，即使是已压缩的文件也是如此。默认情况下，将跳过已压缩的文件。 /Q 仅报告最重要的信息。 /EXE 使用针对经常读取但未修改的可执行文件优化的压缩。 支持的算法: XPRESS4K (最快) (默认) XPRESS8K XPRESS16K LZX (压缩程度最高) /CompactOs 设置或查询系统的压缩状态。支持的选项包括: query - 查询系统的压缩状态。 always - 压缩所有 OS 二进制文件并将系统状态设置为\"压缩\"，这种状态一直保持到管理员更改它。 never - 解压缩所有 OS 二进制文件并将系统状态设置为\"未压缩\"，这种状态一直保持到管理员更改它。 /WinDir 在查询脱机 OS 时与 /CompactOs:query 一起使用。指定 Windows 所安装到的目录。 filename 指定模式、文件或目录。 不带参数使用时，COMPACT 显示当前目录及其所含文件的压缩状态。你可以使用多个文件名和通配符。在多个参数之间必须加空格。 示例 压缩 Z:\\Desktop 目录下所有内容1compact /C /exe:LZX /I /A /F /S \"Z:\\Desktop\" 压缩系统1compact /compactos:always 压缩系统可能导致一些问题，例如磁盘碎片等","tags":[{"name":"cmd","slug":"cmd","permalink":"https://ohyooo.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"https://ohyooo.com/tags/windows/"},{"name":"tips","slug":"tips","permalink":"https://ohyooo.com/tags/tips/"},{"name":"compact","slug":"compact","permalink":"https://ohyooo.com/tags/compact/"}]},{"title":"利用mklink命令转移文件位置","date":"2017-02-06T06:56:34.000Z","path":"2017/02/06/cmd-mklink/","text":"用mklink命令创建的软链接类似一个快捷方式，但和快捷方式不同的是，修改该链接相当于对原文件操作，删除的话只是移除了链接相当于Linux中的ln命令 mklink基本用法 12345678910C:\\Windows\\system32&gt;mklink/?创建符号链接。MKLINK [[/D] | [/H] | [/J]] Link Target /D 创建目录符号链接。默认为文件符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录联接。 Link 指定新的符号链接名称。 Target 指定新链接引用的路径(相对或绝对)。 例如 IntelliJ Idea 的配置目录默认在 %userprofile% 下，万一重装系统配置就会丢失，所以可以通过该命令将其转移到其它分区 12C:\\Windows\\system32&gt;mklink /j \"C:\\Users\\debug\\.IntelliJIdea\" \"F:\\Documents\\IntelliJIdea\\.IntelliJIdea\"为 C:\\Users\\debug\\.IntelliJIdea &lt;&lt;===&gt;&gt; F:\\Documents\\IntelliJIdea\\.IntelliJIdea 创建的联接 这样就创建了一个指向 F:\\Documents\\IDEA\\IdeaConfig.IntelliJIdea 的软连接此时查看 %userprofile% 目录1234C:\\Windows\\system32&gt;dir %userprofile%2017/02/06 22:38 &lt;DIR&gt; .2017/02/06 22:38 &lt;DIR&gt; ..2017/02/06 18:40 &lt;JUNCTION&gt; .IntelliJIdea [F:\\Documents\\IDEA\\IdeaConfig\\.IntelliJIdea] ps: 此处用到的是软连接而不是硬链接，二者稍微不同","tags":[{"name":"cmd","slug":"cmd","permalink":"https://ohyooo.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"https://ohyooo.com/tags/windows/"},{"name":"mklink","slug":"mklink","permalink":"https://ohyooo.com/tags/mklink/"},{"name":"tips","slug":"tips","permalink":"https://ohyooo.com/tags/tips/"}]},{"title":"用GSON解析JSON数据（以心知天气为例）","date":"2017-01-24T07:02:55.000Z","path":"2017/01/24/use-gson-to-parse-json/","text":"Gson 是 Google 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库。可以将一个 JSON 字符串转成一个 Java 对象，或者将对象转换成JSON。 心知天气免费版提供json接口，可以用来练手做天气app以下为一次调用返回数据 {“results”:[{“location”:{“id”:”WTSQQYHVQ973”,”name”:”南京”,”country”:”CN”,”path”:”南京,南京,江苏,中国”,”timezone”:”Asia/Shanghai”,”timezone_offset”:”+08:00”},”now”:{“text”:”多云”,”code”:”4”,”temperature”:”4”},”last_update”:”2017-01-24T22:45:00+08:00”}]}为了方便分辨json的结构，可以先将json格式化1234567891011121314151617181920&#123; \"results\": [ &#123; \"location\": &#123; \"id\": \"WTSQQYHVQ973\", \"name\": \"南京\", \"country\": \"CN\", \"path\": \"南京,南京,江苏,中国\", \"timezone\": \"Asia/Shanghai\", \"timezone_offset\": \"+08:00\" &#125;, \"now\": &#123; \"text\": \"多云\", \"code\": \"4\", \"temperature\": \"4\" &#125;, \"last_update\": \"2017-01-24T21:45:00+08:00\" &#125; ]&#125; 首先按照json数据内容创建jsonBean对象类名不做要求，但属性名必须和json中名称相同这里用内部类的写法更简洁，层次结构也可以和json中一样123456789101112131415161718192021222324252627class JsonBean &#123; List&lt;Results&gt; results; public List&lt;Results&gt; getResults() &#123; return results; &#125; public void setResults(List&lt;Results&gt; results) &#123; this.results = results; &#125; class Results &#123; Location location; Now now; String last_update; class Location &#123; String id; String name; String country; String path; String timezone; String timezone_offset; &#125; class Now &#123; String text; String code; String temperature; &#125; &#125;&#125; 注：json名称冒号后是[] 的放到list里然后用gson将json解析成对象1JsonBean resultBean = new Gson().fromJson(json, JsonBean.class); 从对象中拿到集合1List&lt;JsonBean.Results&gt; beanList = resultBean.getResults(); 读取数据1System.out.println(beanList.get(0).last_update); 完整示例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import com.google.gson.Gson;import java.util.List;public class test2 &#123; public static void main(String[] args) &#123; String json = \"&#123;\\n\" + \" \\\"results\\\": [\\n\" + \" &#123;\\n\" + \" \\\"location\\\": &#123;\\n\" + \" \\\"id\\\": \\\"WTSQQYHVQ973\\\",\\n\" + \" \\\"name\\\": \\\"南京\\\",\\n\" + \" \\\"country\\\": \\\"CN\\\",\\n\" + \" \\\"path\\\": \\\"南京,南京,江苏,中国\\\",\\n\" + \" \\\"timezone\\\": \\\"Asia/Shanghai\\\",\\n\" + \" \\\"timezone_offset\\\": \\\"+08:00\\\"\\n\" + \" &#125;,\\n\" + \" \\\"now\\\": &#123;\\n\" + \" \\\"text\\\": \\\"多云\\\",\\n\" + \" \\\"code\\\": \\\"4\\\",\\n\" + \" \\\"temperature\\\": \\\"4\\\"\\n\" + \" &#125;,\\n\" + \" \\\"last_update\\\": \\\"2017-01-24T21:45:00+08:00\\\"\\n\" + \" &#125;\\n\" + \" ]\\n\" + \"&#125;\";// JsonBean resultBean = new Gson().fromJson(json,JsonBean.class);// //对象中拿到集合// List&lt;JsonBean&gt; userBeanList = resultBean.getMuser(); //GSON直接解析成对象 JsonBean resultBean = new Gson().fromJson(json, JsonBean.class); //对象中拿到集合 List&lt;JsonBean.Results&gt; beanList = resultBean.getResults();// JsonBean jsonBean = new Gson().fromJson(Arrays.toString(userBeanList.toArray()), JsonBean.class); System.out.println(beanList.get(0).last_update); &#125;&#125;class JsonBean &#123; List&lt;Results&gt; results; public List&lt;Results&gt; getResults() &#123; return results; &#125; public void setResults(List&lt;Results&gt; results) &#123; this.results = results; &#125; class Results &#123; Location location; Now now; String last_update; class Location &#123; String id; String name; String country; String path; String timezone; String timezone_offset; &#125; class Now &#123; String text; String code; String temperature; &#125; &#125;&#125;","tags":[{"name":"gson","slug":"gson","permalink":"https://ohyooo.com/tags/gson/"},{"name":"json","slug":"json","permalink":"https://ohyooo.com/tags/json/"},{"name":"android","slug":"android","permalink":"https://ohyooo.com/tags/android/"},{"name":"google","slug":"google","permalink":"https://ohyooo.com/tags/google/"},{"name":"java","slug":"java","permalink":"https://ohyooo.com/tags/java/"},{"name":"code","slug":"code","permalink":"https://ohyooo.com/tags/code/"}]},{"title":"为nginx开启brotli","date":"2017-01-24T05:08:34.000Z","path":"2017/01/24/enable-brotli-with-nginx/","text":"Brotli是通用的无损压缩算法，使用LZ77算法的现代变体，Huffman编码和二阶上下文建模的组合来压缩数据，具有与当前最佳通用压缩方法相当的压缩比。它在速度上类似于deflate，但是压缩比更高。 12345678git clone https://github.com/google/ngx_brotlicd ngx_brotli &amp;&amp; git submodule update --initcd ../nginx-1.11.8./configure --add-module=/root/ngx_brotlimakeservice nginx stopmv /usr/sbin/nginx /usr/sbin/nginx.bakservice ginx start 配置参数（渣翻）brotli_static syntax: brotli_static on|off|always default: off context: http, server, location 检查是否存在.br预压缩文件。值为always时，将在所有情况下使用，且不会检查客户端是否支持 brotli syntax: brotli on|off default: off context: http, server, location, if 是否开启brotli brotli_types syntax: brotli_types &lt;mime_type&gt; [..] default: text/html context: http, server, location 为指定的mime类型压缩，值为 ‘*’ 时压缩任何内容默认包括text/html brotli_buffers syntax: brotli_buffers &lt;number&gt; &lt;size&gt; default: 32 4k|16 8k context: http, server, location 设置缓冲区数量和大小，默认由内存页面决定，4k还是8k取决于平台 brotli_comp_level syntax: brotli_comp_level &lt;level&gt; default: 6 context: http, server, location 设置压缩质量，范围为 0 - 11 brotli_window syntax: brotli_window &lt;size&gt; default: 512k context: http, server, location 设置Brotli窗口大小，包括： 1k, 2k, 4k, 8k, 16k,32k, 64k, 128k, 256k, 512k, 1m, 2m, 4m, 8m 和 16m. brotli_min_length syntax: brotli_min_length &lt;length&gt; default: 20 context: http, server, location 设置被压缩文件的最小长度length，长度由响应头部的Content-Length决定 变量$brotli_ratio压缩比 项目地址：https://github.com/google/ngx_brotli","tags":[{"name":"google","slug":"google","permalink":"https://ohyooo.com/tags/google/"},{"name":"nginx","slug":"nginx","permalink":"https://ohyooo.com/tags/nginx/"},{"name":"brotli","slug":"brotli","permalink":"https://ohyooo.com/tags/brotli/"},{"name":"server","slug":"server","permalink":"https://ohyooo.com/tags/server/"}]},{"title":"nginx开启pagespeed","date":"2017-01-24T04:04:08.000Z","path":"2017/01/24/enable-pagespeed-with-nginx/","text":"ngx_pagespeed可以自动将优化网页和关联资源（CSS，JavaScript，图片），从而加快您的网站速度，缩短网页加载时间，而无需修改现有内容或工作流程。特点包括：-图像优化：剥离元数据，动态调整大小，重新压缩-压缩，级联，内联和外联CSS和JavaScript-小资源内联-延迟加载图像和JavaScript-HTML重写-延长缓存时间 123456#下载nginx与pagespeedwget https://github.com/pagespeed/ngx_pagespeed/archive/latest-beta.tar.gztar zxf latest-beta.tar.gzwget http://nginx.org/download/nginx-1.11.8.tar.gztar zxf nginx-1.11.8.tar.gzcd nginx-1.11.8 查看当前nginx信息1nginx -V 在开头添加./configure###在结尾添加–add-module=/root/ngx_pagespeed-latest-beta 1./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --add-module=/opt/src/nginx-ct/ --add-module=/opt/src/ngx_brotli/ --with-cc-opt=&apos;-g -O2 -fdebug-prefix-map=/data/builder/debuild/nginx-1.11.8/debian/debuild-base/nginx-1.11.8=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2&apos; --with-ld-opt=&apos;-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed&apos; --add-module=/root/ngx_pagespeed-latest-beta 错误提示：12345#./configure: 31: /root/ngx_pagespeed-latest-beta/config: [[: not found# You need to separately download the pagespeed library:# $ cd /root/ngx_pagespeed-latest-beta# $ wget https://dl.google.com/dl/page-speed/psol/1.12.34.2-x64.tar.gz# $ tar -xzvf 1.12.34.2-x64.tar.gz # expands to psol/ 按照提示操作：123cd /root/ngx_pagespeed-latest-betawget https://dl.google.com/dl/page-speed/psol/1.12.34.2-x64.tar.gztar -xzvf 1.12.34.2-x64.tar.gz # expands to psol/ 继续用configure1./configure ...#省略 无错误提示，继续1make 编译完成123mv /usr/sbin/nginx /usr/sbin/nginx.bakcp objs/nginx /usr/sbinnginx -t 没有错误1234#nginx: the configuration file /etc/nginx/nginx.conf syntax is ok#nginx: configuration file /etc/nginx/nginx.conf test is successfulmake upgrade ###在/etc/nginx/nginx.conf添加123456789101112131415161718192021222324pagespeed on;pagespeed ForceCaching on;pagespeed PreserveUrlRelativity on;pagespeed LowercaseHtmlNames on;pagespeed EnableFilters trim_urls;pagespeed EnableFilters rewrite_style_attributes_with_url,rewrite_css,rewrite_images;pagespeed FileCachePath /var/cache/ngx_pagespeed_cache;pagespeed RewriteLevel PassThrough;pagespeed EnableFilters collapse_whitespace;pagespeed EnableFilters canonicalize_javascript_libraries;pagespeed EnableFilters combine_css;pagespeed EnableFilters combine_javascript;pagespeed EnableFilters elide_attributes;pagespeed EnableFilters extend_cache;pagespeed EnableFilters flatten_css_imports;pagespeed CssFlattenMaxBytes 5120;pagespeed EnableFilters lazyload_images;pagespeed EnableFilters convert_jpeg_to_webp,convert_to_webp_lossless,convert_to_webp_animated;pagespeed EnableFilters recompress_webp;pagespeed EnableFilters rewrite_javascript;pagespeed EnableFilters rewrite_images;pagespeed EnableFilters insert_dns_prefetch;pagespeed EnableFilters prioritize_critical_css;pagespeed EnableFilters move_css_to_head; 重新加载nginx1service nginx reload 项目地址：https://github.com/pagespeed/ngx_pagespeed","tags":[{"name":"google","slug":"google","permalink":"https://ohyooo.com/tags/google/"},{"name":"nginx","slug":"nginx","permalink":"https://ohyooo.com/tags/nginx/"},{"name":"server","slug":"server","permalink":"https://ohyooo.com/tags/server/"},{"name":"pagespeed","slug":"pagespeed","permalink":"https://ohyooo.com/tags/pagespeed/"}]}]